function cov_19ygd99iu0(){var path="/home/azra/Desktop/TicketMS/Backend/db.js";var hash="c0178443e3a47397fbdb0b929c295b95da986439";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/azra/Desktop/TicketMS/Backend/db.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:32}},"1":{start:{line:3,column:13},end:{line:9,column:2}},"2":{start:{line:10,column:0},end:{line:10,column:20}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"c0178443e3a47397fbdb0b929c295b95da986439"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_19ygd99iu0=function(){return actualCoverage;};}return actualCoverage;}cov_19ygd99iu0();const Pool=(cov_19ygd99iu0().s[0]++,require("pg").Pool);const pool=(cov_19ygd99iu0().s[1]++,new Pool({user:'postgres',host:'localhost',database:'postgres',password:'azra123',port:5432}));cov_19ygd99iu0().s[2]++;module.exports=pool;// describe('PUT /tickets/:ticketid', () => {
//     afterEach(() => {
//       chai.spy.restore();
//     });
//     it('should return a 400 error if the request body is empty', async () => {
//       const ticketid = 1;
//       const updateData = {};
//       const res = await chai.request(app)
//         .put(`/tickets/${ticketid}`)
//         .send(updateData);
//       expect(res).to.have.status(400);
//       expect(res.body).to.have.property('message').to.eql('Empty request body');
//     });
//     it('should return a 404 error if the ticketid does not exist', async () => {
//       const ticketid = 999;
//       const updateData = {
//         status: 'in progress',
//       };
//       const res = await chai.request(app)
//         .put(`/tickets/${ticketid}`)
//         .send(updateData);
//       expect(res).to.have.status(404);
//       expect(res.body).to.have.property('message').to.eql('Ticket ID does not exist');
//     });
//     it('should update the ticket and return a success message', async () => {
//       const ticketid = 1;
//       const updateData = {
//         status: 'In Progress',
//         priority: 'Low',
//         title: 'Updated Ticket Title',
//         description: 'Updated Ticket Description',
//       };
//       chai.spy.on(pool, 'query');
//       const res = await chai.request(app)
//         .put(`/tickets/${ticketid}`)
//         .send(updateData);
//       expect(res).to.have.status(200);
//       expect(res.body).to.have.property('message').to.eql('Ticket updated');
//       expect(res.body.ticket).to.have.property('status').to.eql(updateData.status);
//       expect(res.body.ticket).to.have.property('priority').to.eql(updateData.priority);
//       expect(res.body.ticket).to.have.property('title').to.eql(updateData.title);
//       expect(res.body.ticket).to.have.property('description').to.eql(updateData.description);
//        expect(pool.query).to.have.been.called.with(
//       'UPDATE tickets SET status = $1, priority = $2, title = $3, description = $4 WHERE id = $5',
//       [updateData.status, updateData.priority, updateData.title, updateData.description, ticketid]
//     );
//     });
//     it('should update ticket status if the status transition is valid', async () => {
//       const ticketId = 1;
//       const newStatus = 'In Progress';
//       const currentStatus = 'Open';
//       const statusOptions = ['Open', 'In Progress', 'Completed'];
//       const selectedStatusObj = statusOptions.indexOf(newStatus);
//       const currentStatusObj = statusOptions.indexOf(currentStatus);
//       const spy = chai.spy.on(pool, 'query');
//       const res = await chai.request(app)
//         .put(`/tickets/${ticketId}`)
//         .send({
//           status: newStatus
//         });
//       expect(res).to.have.status(200);
//       expect(res.body).to.be.a('object');
//       expect(res.body).to.have.property('message').eql('Ticket updated');
//       expect(res.body.ticket).to.have.property('status').eql(newStatus);
//       expect(pool.query).to.have.been.called.exactly(2);
//       const expectedQuery1 = `SELECT ticketid, status FROM Tickets WHERE ticketid = $1`;
//       const expectedQuery2 = `UPDATE Tickets SET status = $1 WHERE ticketid = $2`;
//       expect(pool.query).to.have.been.called.with(expectedQuery1, [ticketId]);
//       expect(pool.query).to.have.been.called.with(expectedQuery2, [newStatus, ticketId]);
//       expect(Math.abs(currentStatusObj - selectedStatusObj)).to.equal(1);
//     });
//       it('should return an error if status transition is invalid', async () => {
//         const ticketId = 1;
//         const newStatus = 'Open';
//         const currentStatus = 'Completed';
//         const statusOptions = ['Open', 'In progress', 'Completed'];
//         const selectedStatusObj = statusOptions.indexOf(newStatus);
//         const currentStatusObj = statusOptions.indexOf(currentStatus);
//         const spy = chai.spy.on(pool, 'query');
//         chai.request(app)
//           .put(`/tickets/${ticketId}`)
//           .send({
//             status: newStatus
//           })
//           .end((err, res) => {
//             res.should.have.status(400);
//             res.body.should.be.a('object');
//             res.body.should.have.property('message').eql('Invalid status transition');
//             chai.expect(pool.query).to.have.been.called.exactly(1);
//             const expectedQuery = `SELECT ticketid, status FROM Tickets WHERE ticketid = ${ticketId}`;
//            chai.expect(pool.query).to.have.been.called.with(expectedQuery);
//             chai.expect(Math.abs(currentStatusObj - selectedStatusObj)).to.not.equal(1);
//           });
//       });
//     });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,